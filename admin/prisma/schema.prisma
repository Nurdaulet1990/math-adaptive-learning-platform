// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Topic {
  id          String      @id @default(cuid())
  name        String
  description String?
  parentId    String?     @map("parent_id")
  parent      Topic?      @relation("TopicToSubtopic", fields: [parentId], references: [id])
  subtopics   Topic[]     @relation("TopicToSubtopic")
  questions   Question[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  Progress    Progress[]

  @@map("topics")
}

model Question {
  id           String   @id @default(cuid())
  topicId      String   @map("topic_id")
  topic        Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  question     String
  options      Json     // Array of options
  correctIndex Int      @map("correct_index")
  explanation  String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("questions")
}

model Progress {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId        String   @map("topic_id")
  topic          Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  correctStreak  Int      @default(0) @map("correct_streak")
  questionsTotal Int      @default(0) @map("questions_total")
  correctTotal   Int      @default(0) @map("correct_total")
  completed      Boolean  @default(false)
  lastAttempt    DateTime @default(now()) @map("last_attempt")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@unique([userId, topicId])
  @@map("progress")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  password      String?
  image         String?
  role          Role       @default(STUDENT)
  progress      Progress[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}
